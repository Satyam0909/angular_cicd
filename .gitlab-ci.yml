image: docker:latest
image: awscli

services:
  - docker:dind

stages:
  - build
  - deploy

before_script:
  - docker info

variables:
  DOCKER_REGISTRY: public.ecr.aws/s8v6h6c5/angular-cicd #<AWS_ACCOUNT_ID>.dkr.ecr.<AWS_REGION>.amazonaws.com
  DOCKER_REPOSITORY: angular-cicd #<ECR_REPOSITORY_NAME>
  DOCKER_IMAGE_NAME: angular-cicd-crud #<IMAGE_NAME>
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID  # Define these environment variables in your GitLab CI/CD settings
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY

build:
  stage: build
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - echo "$DOCKER_REGISTRY_PASSWORD" | docker login -u "$DOCKER_REGISTRY_USER" --password-stdin "$DOCKER_REGISTRY"
    - docker build -t "$DOCKER_REPOSITORY/$DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA" .
    - docker push "$DOCKER_REPOSITORY/$DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
    - docker logout

deploy:
  stage: deploy
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin "$DOCKER_REGISTRY"
    - docker pull "$DOCKER_REPOSITORY/$DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
    - docker tag "$DOCKER_REPOSITORY/$DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA" "$DOCKER_REGISTRY/$DOCKER_REPOSITORY/$DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
    - docker push "$DOCKER_REGISTRY/$DOCKER_REPOSITORY/$DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA"

    # Deploy to ECS (you will need to customize these commands based on your ECS setup)
    - aws ecs update-service --cluster <ECS_CLUSTER_NAME> --service <ECS_SERVICE_NAME> --force-new-deployment

    # Optionally, clean up old Docker images to save space on GitLab Runner
    - docker system prune -af
